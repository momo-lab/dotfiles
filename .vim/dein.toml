# プラグインマネージャ {{{
# vim:fdm=marker
[[plugins]] # Dein.vim
repo = 'Shougo/dein.vim'

# ======================================================================== }}}
# ヘルプ {{{
[[plugins]] # 日本語ヘルプ
repo = 'vim-jp/vimdoc-ja'
hook_add = '''
  set helplang=ja
'''

# ======================================================================== }}}
# カラースキーマ {{{
[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
  set cursorline
  augroup my_colorscheme
    autocmd!
    autocmd VimEnter * nested colorscheme hybrid
    " 行番号を少し目立たせる(TODO guifgは未テスト)
    autocmd ColorScheme * hi LineNr       ctermfg=245 ctermbg=236 guifg=#373b41
    autocmd ColorScheme * hi CursorLineNr ctermfg=221 ctermbg=236 guifg=#f0c674
    autocmd ColorScheme * hi clear CursorLine
  augroup END
'''

[[plugins]] # cursor位置のコンテキストによってfiletypeを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]] # インデントを可視化
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_auto_colors = 0
  autocmd VimEnter,Colorscheme * hi IndentGuidesOdd  ctermbg=240
  autocmd VimEnter,Colorscheme * hi IndentGuidesEven ctermbg=236
'''

# ======================================================================== }}}
# カーソル移動(テキストオブジェクトとか) {{{
[[plugins]]
repo = 'tpope/vim-surround'

# ======================================================================== }}}
# 編集 {{{
[[plugins]] # ヤンクを共有する
repo = 'rtakasuke/yanktmp.vim'
on_func = ['YanktmpYank', 'YanktmpPaste_p', 'YanktmpPaste_P']
hook_add = '''
  let g:yanktmp_file = '/tmp/yanktmp'
  map <silent> sy :call YanktmpYank()<CR>
  map <silent> sp :call YanktmpPaste_p()<CR>
  map <silent> sP :call YanktmpPaste_P()<CR>
'''

[[plugins]] # コメントアウト
# caw.vimはdot repeatするのに別のプラグインが必要なのでとりあえず使うのやめる
#repo = 'tyru/caw.vim'
repo = 'tomtom/tcomment_vim'
hook_add = '''
  let g:tcommentMapLeader1 = '<c-\>'
'''

[[plugins]] # リナンバをする
repo = 'renumber.vim'
on_cmd = ['Renumber']

[[plugins]] # undo内容をツリー形式で表示する
repo = 'mbbill/undotree'
on_cmd = ['UndotreeToggle']
hook_add = '''
  nnoremap <F4> :<C-u>UndotreeToggle<CR>
'''

# ======================================================================== }}}
# バッファ内検索 {{{
[[plugins]]
repo = 'haya14busa/incsearch.vim'
depends = ['vim-anzu', 'vim-asterisk']
on_map = '<Plug>'
hook_add = '''
  set ignorecase
  set smartcase
  set hlsearch
  let g:incsearch#auto_nohlsearch = 1
  map /  <Plug>(incsearch-forward)
  map ?  <Plug>(incsearch-backward)
  map g/ <Plug>(incsearch-stay)
  map n  <Plug>(incsearch-nohl-n)<Plug>(anzu-update-search-status)
  map N  <Plug>(incsearch-nohl-N)<Plug>(anzu-update-search-status)
  map *  <Plug>(incsearch-nohl0)<Plug>(asterisk-z*)<Plug>(anzu-update-search-status)
  map #  <Plug>(incsearch-nohl0)<Plug>(asterisk-z#)<Plug>(anzu-update-search-status)
  map g* <Plug>(incsearch-nohl0)<Plug>(asterisk-gz*)<Plug>(anzu-update-search-status)
  map g# <Plug>(incsearch-nohl0)<Plug>(asterisk-gz#)<Plug>(anzu-update-search-status)
  augroup vim-anzu
    " カーソルが移動したとき(CursorMoved)、一定時間キー入力がないとき(CursorHold,CursorHoldI)、
    " ウインドウを移動したとき(WinLeave)、タブを移動したとき(TabLeave)に
    " 検索ヒット数の表示を消去する
    autocmd!
    autocmd CursorMoved,CursorHold,CursorHoldI,WinLeave,TabLeave *
          \ call anzu#clear_search_status()
  augroup END
'''

[[plugins]] # /,? の検索件数を表示する
repo = 'osyo-manga/vim-anzu'
lazy = 1

[[plugins]] # *,# での検索を強化
repo = 'haya14busa/vim-asterisk'
lazy = 1

# ======================================================================== }}}
# ウィンドウ/タブ操作 {{{
[[plugins]] # vim-submode
repo = 'kana/vim-submode'
hook_add = '''
  " ウィンドウのサイズ変更をキーリピートできるようにする
  call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
  call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
  call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
  call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
  call submode#map('winsize', 'n', '', '>', '<C-w>>')
  call submode#map('winsize', 'n', '', '<', '<C-w><')
  call submode#map('winsize', 'n', '', '+', '<C-w>+')
  call submode#map('winsize', 'n', '', '-', '<C-w>-')
  " タブページの切り替えをキーリピートできるようにする
  call submode#enter_with('tabchange', 'n', '', 'gt', 'gt')
  call submode#enter_with('tabchange', 'n', '', 'gT', 'gT')
  call submode#map('tabchange', 'n', '', 't', 'gt')
  call submode#map('tabchange', 'n', '', 'T', 'gT')
'''

# ======================================================================== }}}
# Unite {{{
[[plugins]] # Unite
repo = 'Shougo/unite.vim'
depends = ['vimproc.vim']
on_cmd = 'Unite'
hook_add = '''
  let g:unite_split_rule = 'botright'
  let g:unite_enable_start_insert = 0
  let g:unite_enable_short_source_names = 1
  let g:unite_source_menu_menus = {}

  " unite-grepのバックエンドをptに切り替える
  " http://qiita.com/items/c8962f9325a5433dc50d
  let g:unite_source_grep_encoding = 'utf-8'
  if executable('pt')
    let g:unite_source_grep_command = 'pt'
    let g:unite_source_grep_default_opts = '--nocolor --nogroup'
    let g:unite_source_grep_recursive_opt = ''
    let g:unite_source_grep_max_candidates = 200
  endif

  autocmd FileType unite call s:unite_my_settings()
  function! s:unite_my_settings()
    " <ESC>連打で終了
    nmap <buffer> <ESC>   <Plug>(unite_exit)
    imap <buffer> <ESC><ESC>   <Plug>(unite_exit)
    " Ctrl+J/Kで選択
    imap <buffer> <C-j>   <Plug>(unite_select_next_line)
    imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
    " 1ワード削除(インサートモードと同じ挙動になるようにする)
    nmap <buffer> <C-w>   <Plug>(unite_delete_backspace_word)
    " 既に入力されている文字を削除した状態で入力
    nmap <buffer> I       <Plug>(unite_append_end)<Plug>(unite_delete_backward_line)
    nmap <buffer> <C-u>   <Plug>(unite_append_end)<Plug>(unite_delete_backward_line)
  endfunction

  nnoremap [unite] <Nop>
  nmap <Space> [unite]
  " 前回のUnite結果を再表示
  nnoremap <silent> [unite]<Space> :<C-u>UniteResume<CR>
  " ソースを選択
  nnoremap <silent> [unite]s :<C-u>Unite source<CR>
  " カレントバッファのディレクトリ配下のファイルを表示
  nnoremap <silent> [unite]f :<C-u>UniteWithBufferDir
        \ -start-insert -hide-source-names
        \ file_rec file/new<CR>
  " カレントディレクトリ配下のファイルを表示
  nnoremap <silent> [unite]F :<C-u>Unite
        \ -start-insert -hide-source-names
        \ file_rec file/new<CR>
  " git管理のファイルを表示
  nnoremap <silent> <C-p> :<C-u>Unite
        \ -start-insert -hide-source-names
        \ file_rec/git:--cached:--others:--exclude-standard
        \ file/new<CR>
  " Grep
  nnoremap <silent> [unite]g :<C-u>Unite grep:. -no-empty<CR>
'''

[[plugins]] # Uniteでファイル履歴を扱えるようにする
repo = 'Shougo/neomru.vim'
depends = ['unite.vim']
hook_add = '''
  " ファイル履歴を表示
  nnoremap <silent> [unite]r :<C-u>Unite
        \ -start-insert -hide-source-names
        \ neomru/file file/new<CR>
  " ディレクトリ履歴を表示
  nnoremap <silent> [unite]R :<C-u>Unite
        \ -start-insert -hide-source-names
        \ neomru/directory<CR>
'''

[[plugins]] # カラースキーマを切り替える
repo = 'ujihisa/unite-colorscheme'
depends = ['unite.vim']

[[plugins]] # ハイライトを表示
repo = 'osyo-manga/unite-highlight'
depends = ['unite.vim']

# ======================================================================== }}}
# ファイラ {{{
[[plugins]] # Vimfiler
repo = 'Shougo/vimfiler.vim'
depends = ['unite.vim']
hook_add = '''
  let g:vimfiler_as_default_explorer = 1
'''

# ======================================================================== }}}
# ステータスライン {{{
[[plugins]]
repo = 'itchyny/lightline.vim'
depends = ['vim-fugitive']
hook_add = '''
  let g:lightline = {
        \ 'active': {
        \   'left': [
        \     ['mode', 'paste'],
        \     ['readonly', 'filename', 'modified'],
        \     ['gitbranch'],
        \     ['anzu'],
        \   ],
        \   'right': [
        \     ['rowinfo'],
        \     ['fileformat', 'fileencoding', 'filetype'],
        \   ],
        \ },
        \ 'inactive': {
        \   'left':  [ ['filename', 'modified'] ],
        \   'right': [ ['rowinfo'] ],
        \ },
        \ 'component': {
        \   'anzu': '%{anzu#search_status()}',
        \   'gitbranch': '%{fugitive#statusline()}',
        \   'rowinfo': '%4l/%L(%3p%%):%-3v',
        \ },
        \ 'subseparator': {'left': '', 'right': '|'},
        \ }
  command! -bar LightlineUpdate
        \ call lightline#init() |
        \ call lightline#colorscheme() |
        \ call lightline#update()
'''

# ======================================================================== }}}
# QuickRun {{{
[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'QuickRun'
hook_add = '''
  let g:quickrun_config = {
              \ 'ruby': { 'command': 'bundruby' }
              \ }
'''

# ======================================================================== }}}
# Google翻訳 {{{
[[plugins]]
repo = 'daisuzu/translategoogle.vim'
on_cmd = ['TranslateGoogle', 'TranslateGoogleCmd']

# ======================================================================== }}}
# for git {{{
[[plugins]] # :Gwrite, :Gdiff, :GcommitなどGで始まるコマンドを提供
repo = 'tpope/vim-fugitive'
hook_add = '''
  command! Gci Gcommit
  command! Gcia Gcommit -a
'''

[[plugins]] # gitの差分を左端に表示する
repo = 'airblade/vim-gitgutter'

[[plugins]] # :Agitでgitのログを見る
repo = 'cohama/agit.vim'
on_cmd = ['Agit', 'AgitFile']

# ======================================================================== }}}
# for github {{{
[[plugins]] # Github issue
repo = 'jaxbot/github-issues.vim'
on_cmd = 'Gissue'
hook_add = '''
  let g:github_issues_no_omni = 1
'''

[[plugins]] # Gist操作
repo = 'lambdalisue/vim-gista'
on_cmd = 'Gista'
hook_add = '''
  let g:gista#command#list#default_opener = 'botright 15 split'
  let g:gista#command#post#default_public = 0
  autocmd FileType gista-list call s:gista_list_mappings()
  function! s:gista_list_mappings()
    nmap <buffer> <ESC> <Plug>(gista-quit)
  endfunction
'''

[[plugins]] # Gist操作(Uniteプラグイン)
repo = 'lambdalisue/vim-gista-unite'
lazy = 1
depends = ['vim-gista']

# ======================================================================== }}}
# for toml {{{
[[plugins]] # TOML syntax
# ハイライトがおかしくなることがあるのでforkして修正したものを使用している。
# PRした方がいいんだけど、常に先頭から解析するのが本当に良いのか微妙で躊躇している。
repo = 'momo-lab/vim-toml'
rev = 'fix_syntax_sync'
on_ft = 'toml'

# ======================================================================== }}}
# for html {{{
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html']
hook_add = '''
  let g:user_emmet_leader_key = '<c-y>'
'''

# ======================================================================== }}}
# library {{{
[[plugins]]
repo = 'Shougo/vimproc.vim'
lazy = 1
build = 'make'

[[plugins]]
repo = 'vim-jp/vital.vim'
lazy = 1

[[plugins]]
repo = 'lambdalisue/vital-Web-API-GitHub'
lazy = 1

[[plugins]]
repo = 'mattn/webapi-vim'
lazy = 1

[[plugins]] # cursor位置のファイルタイプ判定ライブラリ
repo = 'Shougo/context_filetype.vim'
lazy = 1

# ======================================================================== }}}
