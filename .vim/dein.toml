# プラグインマネージャ {{{
# vim:fdm=marker
[[plugins]] # Dein.vim
repo = 'Shougo/dein.vim'

[[plugins]] # :Dein コマンドを提供する
repo = 'haya14busa/dein-command.vim'
depends = ['dein.vim']
on_cmd = ['Dein']

# ======================================================================== }}}
# ヘルプ {{{
[[plugins]] # 日本語ヘルプ
repo = 'vim-jp/vimdoc-ja'
hook_add = '''
  set helplang=ja
'''

[[plugins]] # 各種マニュアル
repo = 'thinca/vim-ref'
depends = ['jsref', 'jqapi']
hook_add = '''
  inoremap <silent><C-k> <C-o>:call<Space>ref#K('normal')<CR><ESC>
  nmap <silent>K <Plug>(ref-keyword)

  let g:ref_no_default_key_mappings = 1
  let g:ref_cache_dir               = $HOME . '/.vim/vim-ref/cache'
  let g:ref_detect_filetype         = {
  \    'css':        'phpmanual',
  \    'html':       ['phpmanual',  'javascript', 'jquery'],
  \    'javascript': ['javascript', 'jquery'],
  \    'php':        ['phpmanual',  'javascript', 'jquery']
  \}
  let g:ref_javascript_doc_path = $HOME . '/.cache/dein/repos/github.com/tokuhirom/jsref/htdocs'
  let g:ref_jquery_doc_path     = $HOME . '/.cache/dein/repos/github.com/mustardamus/jqapi'
  let g:ref_phpmanual_path      = $HOME . '/.vim/vim-ref/php-chunked-xhtml'
  let g:ref_use_cache           = 1
'''
[[plugins]]
repo = 'tokuhirom/jsref'
lazy = 1

[[plugins]]
repo = 'mustardamus/jqapi'
lazy = 1

# ======================================================================== }}}
# カラースキーマ {{{
[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
  set cursorline
  augroup my_colorscheme
    autocmd!
    autocmd VimEnter * nested colorscheme hybrid
    " 行番号を少し目立たせる(TODO guifgは未テスト)
    autocmd ColorScheme * hi LineNr       ctermfg=245 ctermbg=236 guifg=#373b41
    autocmd ColorScheme * hi CursorLineNr ctermfg=221 ctermbg=236 guifg=#f0c674
    " カーソル行は下線を引く
    autocmd ColorScheme * hi clear CursorLine
    autocmd ColorScheme * hi CursorLine   term=underline cterm=underline
  augroup END
'''

[[plugins]] # cursor位置のコンテキストによってfiletypeを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]] # インデントを可視化
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_auto_colors = 0
  autocmd VimEnter,Colorscheme * hi IndentGuidesOdd  ctermbg=240
  autocmd VimEnter,Colorscheme * hi IndentGuidesEven ctermbg=236
'''

# ======================================================================== }}}
# カーソル移動(テキストオブジェクトとか、ctagsとか) {{{
[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]] # ctagsを便利に使う
repo = 'soramugi/auto-ctags.vim'
if = 'has("ctags")'
hook_add = '''
  let g:auto_ctags = 1
  let g:auto_ctags_directory_list = ['.git', '.svn']
  set tags=.git/tags,.svn/tags,./tags,tags
'''

[[plugins]]
repo = 'sgur/vim-textobj-parameter'
depends = ['vim-textobj-user']

[[plugins]]
repo = 'kana/vim-textobj-user'
lazy = 1

# ======================================================================== }}}
# EditorConfig {{{
[[plugins]]
repo = 'editorconfig/editorconfig-vim'

# ======================================================================== }}}
# 編集 {{{
[[plugins]] # ヤンクを共有する
repo = 'rtakasuke/yanktmp.vim'
on_func = ['YanktmpYank', 'YanktmpPaste_p', 'YanktmpPaste_P']
hook_add = '''
  let g:yanktmp_file = '/tmp/yanktmp'
  map <silent> sy :call YanktmpYank()<CR>
  map <silent> sp :call YanktmpPaste_p()<CR>
  map <silent> sP :call YanktmpPaste_P()<CR>
'''

[[plugins]] # ヤンク履歴を管理
repo = 'LeafCage/yankround.vim'
hook_add = '''
  nmap p <Plug>(yankround-p)
  xmap p <Plug>(yankround-p)
  nmap P <Plug>(yankround-P)
  nmap gp <Plug>(yankround-gp)
  xmap gp <Plug>(yankround-gp)
  nmap gP <Plug>(yankround-gP)
  "nmap <C-p> <Plug>(yankround-prev)
  nmap <C-n> <Plug>(yankround-next)
'''

[[plugins]] # コメントアウト
# Help: visualモードでgc、normalモードでgc<Count>c{motion}などで行ける。
repo = 'tomtom/tcomment_vim'
hook_add = '''
  let g:tcomment_mapleader1 = '<c-\>'
'''

[[plugins]] # リナンバをする
repo = 'vim-scripts/renumber.vim'
on_cmd = ['Renumber']

[[plugins]] # undo内容をツリー形式で表示する
repo = 'mbbill/undotree'
on_cmd = ['UndotreeToggle']
hook_add = '''
  nnoremap <F4> :<C-u>UndotreeToggle<CR>
'''

# ======================================================================== }}}
# バッファ内検索 {{{
[[plugins]]
repo = 'haya14busa/incsearch.vim'
depends = ['vim-anzu', 'vim-asterisk']
on_map = '<Plug>'
hook_add = '''
  set ignorecase
  set smartcase
  set hlsearch
  let g:incsearch#auto_nohlsearch = 1
  map /  <Plug>(incsearch-forward)
  map ?  <Plug>(incsearch-backward)
  map g/ <Plug>(incsearch-stay)
  map n  <Plug>(incsearch-nohl-n)<Plug>(anzu-update-search-status)
  map N  <Plug>(incsearch-nohl-N)<Plug>(anzu-update-search-status)
  map *  <Plug>(incsearch-nohl0)<Plug>(asterisk-z*)<Plug>(anzu-update-search-status)
  map #  <Plug>(incsearch-nohl0)<Plug>(asterisk-z#)<Plug>(anzu-update-search-status)
  map g* <Plug>(incsearch-nohl0)<Plug>(asterisk-gz*)<Plug>(anzu-update-search-status)
  map g# <Plug>(incsearch-nohl0)<Plug>(asterisk-gz#)<Plug>(anzu-update-search-status)
  augroup vim-anzu
    " カーソルが移動したとき(CursorMoved)、一定時間キー入力がないとき(CursorHold,CursorHoldI)、
    " ウインドウを移動したとき(WinLeave)、タブを移動したとき(TabLeave)に
    " 検索ヒット数の表示を消去する
    autocmd!
    autocmd CursorMoved,CursorHold,CursorHoldI,WinLeave,TabLeave *
          \ call anzu#clear_search_status()
  augroup END
'''

[[plugins]] # /,? の検索件数を表示する
repo = 'osyo-manga/vim-anzu'
lazy = 1

[[plugins]] # *,# での検索を強化
repo = 'haya14busa/vim-asterisk'
lazy = 1

# ======================================================================== }}}
# ウィンドウ/タブ操作 {{{
[[plugins]] # vim-submode
repo = 'kana/vim-submode'
on_event = 'VimEnter'
hook_post_source = '''
  " ウィンドウのサイズ変更をキーリピートできるようにする
  call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
  call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
  call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
  call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
  call submode#map('winsize', 'n', '', '>', '<C-w>>')
  call submode#map('winsize', 'n', '', '<', '<C-w><')
  call submode#map('winsize', 'n', '', '+', '<C-w>+')
  call submode#map('winsize', 'n', '', '-', '<C-w>-')
  " タブページの切り替えをキーリピートできるようにする
  call submode#enter_with('tabchange', 'n', '', 'gt', 'gt')
  call submode#enter_with('tabchange', 'n', '', 'gT', 'gT')
  call submode#map('tabchange', 'n', '', 't', 'gt')
  call submode#map('tabchange', 'n', '', 'T', 'gT')
'''

[[plugins]]
repo = 'christoomey/vim-tmux-navigator'

# ======================================================================== }}}
# coc.nvim {{{
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
hook_add = '''
  " <TAB><S-TAB>で補完対象のカーソル移動
  " <C-Space>で補完対象のカーソルを進める
  inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ coc#refresh()
  inoremap <expr> <S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
  inoremap <silent><expr> <C-Space>
    \ pumvisible() ? "\<C-n>" : 
    \ <SID>check_back_space() ? "\<C-Space>" :
    \ coc#refresh()
  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1] =~# '\s'
  endfunction

  " <CR>で先頭を選択して括弧とかも補完
  inoremap <silent><expr> <CR>
    \ pumvisible() ? coc#_select_confirm() :
    \ "\<C-g>u\<CR>\<C-r>=coc#on_enter()\<CR>"

  " ロケーションリストの移動
  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)

  " コードナビ
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  " Kでヘルプ
  nnoremap <silent> K :call <SID>show_documentation()<CR>
  function! s:show_documentation()
    if (index(['vim', 'help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
      call CocActionAsync('doHover')
    else
      execute '!' . &keywordprg . " " . expand('<cword>')
    endif
  endfunction
  
  " テキストオブジェクト
  " textDocument.documentSymbolがlanguage serverでサポートされている必要あり
  xmap if <Plug>(coc-funcobj-i)
  omap if <Plug>(coc-funcobj-i)
  xmap af <Plug>(coc-funcobj-a)
  omap af <Plug>(coc-funcobj-a)
  xmap ic <Plug>(coc-classobj-i)
  omap ic <Plug>(coc-classobj-i)
  xmap ac <Plug>(coc-classobj-a)
  omap ac <Plug>(coc-classobj-a)

  " フローティングウィンドウやポップアップで <C-f>/<C-b> でスクロール可能にする
  if has('nvim-0.4.0') || has('patch-8.2.0750')
    nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<C-r>=coc#float#scroll(1)\<CR>" : "\<Right>"
    inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<C-r>=coc#float#scroll(0)\<CR>" : "\<Left>"
    vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  endif
'''

# hook_add = '''
#   " Make <CR> auto-select the first completion item and notify coc.nvim to
#   " format on enter, <cr> could be remapped by other vim plugin
#   inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
#                                 \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
#
#   " Use `[g` and `]g` to navigate diagnostics
#   " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
#   nmap <silent> [g <Plug>(coc-diagnostic-prev)
#   nmap <silent> ]g <Plug>(coc-diagnostic-next)
#
#   " GoTo code navigation.
#   nmap <silent> gd <Plug>(coc-definition)
#   nmap <silent> gy <Plug>(coc-type-definition)
#   nmap <silent> gi <Plug>(coc-implementation)
#   nmap <silent> gr <Plug>(coc-references)
#
#   " Use K to show documentation in preview window.
#   nnoremap <silent> K :call <SID>show_documentation()<CR>
#
#   function! s:show_documentation()
#     if (index(['vim','help'], &filetype) >= 0)
#       execute 'h '.expand('<cword>')
#     elseif (coc#rpc#ready())
#       call CocActionAsync('doHover')
#     else
#       execute '!' . &keywordprg . " " . expand('<cword>')
#     endif
#   endfunction
#
#   " Highlight the symbol and its references when holding the cursor.
#   autocmd CursorHold * silent call CocActionAsync('highlight')
#
#   " Symbol renaming.
#   nmap <leader>rn <Plug>(coc-rename)
#
#   " Formatting selected code.
#   xmap <leader>f  <Plug>(coc-format-selected)
#   nmap <leader>f  <Plug>(coc-format-selected)
#
#   augroup mygroup
#     autocmd!
#     " Setup formatexpr specified filetype(s).
#     autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
#     " Update signature help on jump placeholder.
#     autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
#   augroup end
#
#   " Applying codeAction to the selected region.
#   " Example: `<leader>aap` for current paragraph
#   xmap <leader>a  <Plug>(coc-codeaction-selected)
#   nmap <leader>a  <Plug>(coc-codeaction-selected)
#
#   " Remap keys for applying codeAction to the current buffer.
#   nmap <leader>ac  <Plug>(coc-codeaction)
#   " Apply AutoFix to problem on the current line.
#   nmap <leader>qf  <Plug>(coc-fix-current)
#
#   " Map function and class text objects
#   " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
#   xmap if <Plug>(coc-funcobj-i)
#   omap if <Plug>(coc-funcobj-i)
#   xmap af <Plug>(coc-funcobj-a)
#   omap af <Plug>(coc-funcobj-a)
#   xmap ic <Plug>(coc-classobj-i)
#   omap ic <Plug>(coc-classobj-i)
#   xmap ac <Plug>(coc-classobj-a)
#   omap ac <Plug>(coc-classobj-a)
#
#   " Remap <C-f> and <C-b> for scroll float windows/popups.
#   if has('nvim-0.4.0') || has('patch-8.2.0750')
#     nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
#     nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
#     inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
#     inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
#     vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
#     vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
#   endif
#
#   " Use CTRL-S for selections ranges.
#   " Requires 'textDocument/selectionRange' support of language server.
#   nmap <silent> <C-s> <Plug>(coc-range-select)
#   xmap <silent> <C-s> <Plug>(coc-range-select)
#
#   " Add `:Format` command to format current buffer.
#   command! -nargs=0 Format :call CocAction('format')
#
#   " Add `:Fold` command to fold current buffer.
#   command! -nargs=? Fold :call     CocAction('fold', <f-args>)
#
#   " Add `:OR` command for organize imports of the current buffer.
#   command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
#
#   " Add (Neo)Vim's native statusline support.
#   " NOTE: Please see `:h coc-status` for integrations with external plugins that
#   " provide custom statusline: lightline.vim, vim-airline.
#   set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
#
#   " Mappings for CoCList
#   " Show all diagnostics.
#   nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
#   " Manage extensions.
#   nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
#   " Show commands.
#   nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
#   " Find symbol of current document.
#   nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
#   " Search workspace symbols.
#   nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
#   " Do default action for next item.
#   nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
#   " Do default action for previous item.
#   nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
#   " Resume latest coc list.
#   nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
# '''

# ======================================================================== }}}
# Denite {{{
[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['yankround.vim', 'nvim-yarp', 'vim-hug-neovim-rpc']
on_event = 'VimEnter'
hook_post_source = '''

  " Define mappings
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d
    \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>
    \ denite#do_map('toggle_select').'j'
  endfunction

  autocmd FileType denite-filter call s:denite_filter_my_settings()
  function! s:denite_filter_my_settings() abort
    imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
  endfunction

  " オプション/エイリアス設定
  call denite#custom#var('file/rec', 'command',
        \ ['pt', '--files', '--glob', '!.git'])
  call denite#custom#alias('source', 'file/rec/git', 'file/rec')
  call denite#custom#var('file/rec/git', 'command',
        \ ['git', 'ls-files', '-co', '--exclude-standard'])
  call denite#custom#var('grep', 'command', ['rg'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'final_opts', [])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'default_opts',
        \ ['--vimgrep', '--no-heading', '--glob', '!*.min.*'])

  " よく使うファイルをメニューに登録
  let s:menus = {}
  let s:menus.fav_files = {
        \   'description': 'Favolite menus'
        \ }
  let s:menus.fav_files.command_candidates = [
        \   ['show gist list',    'Denite unite:gista'],
        \   ['load .vimrc',       'source '  . resolve(expand('~/.vimrc'))],
        \   ['edit .vimrc',       'tabedit ' . resolve(expand('~/.vimrc'))],
        \   ['edit dein.toml',    'tabedit ' . resolve(expand('~/.vim/dein.toml'))],
        \   ['edit .zshrc',       'tabedit ' . resolve(expand('~/.zshrc'))],
        \ ]
	call denite#custom#var('menu', 'menus', s:menus)

  " ショートカット
  nnoremap [denite] <Nop>
  nmap <Space> [denite]
  " 前回のUnite結果を再表示
  nnoremap <silent> [denite]<Space> :<C-u>Denite -resume<CR>
  " Grep
  nnoremap <silent> [denite]g :<C-u>Denite grep -no-empty<CR>
  " ファイルを開く
  nnoremap <silent> <SID>(my-denite-open) :<C-u>Denite
        \ file/rec/git
        \ file_mru
        \ file/rec:`expand('%:p:h')`
        \ buffer
        \ file_new:`expand('%:p:h')`<CR>
  nmap <expr> <C-p> yankround#is_active() ? "\<Plug>(yankround-prev)" : "<SID>(my-denite-open)"

  " Grep
  nnoremap <silent> [denite]g :<C-u>Denite grep:. -no-empty -buffer-name=search-buffer-denite<CR>
  nnoremap <silent> [denite]G :<C-u>Denite -resume -buffer-name=search-buffer-denite<CR>
  nnoremap <silent> [denite]n :<C-u>Denite -resume -buffer-name=search-buffer-denite
        \ -select=+1 -immediately<CR>
  nnoremap <silent> [denite]N :<C-u>Denite -resume -buffer-name=search-buffer-denite
        \ -select=-1 -immediately<CR>
  " Menu
  nnoremap <silent> [denite]m :<C-u>Denite menu:fav_files<CR>
'''

[[plugins]] # :Denite unite:xxx のために導入
repo = 'Shougo/unite.vim'

[[plugins]] # Uniteでファイル履歴を扱えるようにする
repo = 'Shougo/neomru.vim'

[[plugins]] # アウトラインを表示
repo = 'Shougo/unite-outline'
depends = ['unite.vim']

[[plugins]] # カラースキーマを切り替える
repo = 'ujihisa/unite-colorscheme'
depends = ['unite.vim']

[[plugins]] # ハイライトを表示
repo = 'osyo-manga/unite-highlight'
depends = ['unite.vim']

[[plugins]] # Gist一覧を表示
repo = 'lambdalisue/vim-gista-unite'
depends = ['vim-gista', 'unite.vim']

[[plugins]] # 新規ファイルを開く
repo = 'momo-lab/denite-source-file-new'

[[plugins]] # output
repo = 'momo-lab/denite-source-output'

# ======================================================================== }}}
# Unite {{{
# [[plugins]] # Unite
# repo = 'Shougo/unite.vim'
# depends = ['vimproc.vim']
# on_cmd = 'Unite'
# hook_add = '''
#   let g:unite_split_rule = 'botright'
#   let g:unite_enable_start_insert = 0
#   let g:unite_enable_short_source_names = 1
#   let g:unite_source_menu_menus = {}
#
#   " unite-grepのバックエンドをptに切り替える
#   " http://qiita.com/items/c8962f9325a5433dc50d
#   let g:unite_source_grep_encoding = 'utf-8'
#   if executable('pt')
#     let g:unite_source_grep_command = 'pt'
#     let g:unite_source_grep_default_opts = '--nocolor --nogroup'
#     let g:unite_source_grep_recursive_opt = ''
#     let g:unite_source_grep_max_candidates = 200
#   endif
#
#   autocmd FileType unite call s:unite_my_settings()
#   function! s:unite_my_settings()
#     " <ESC>連打で終了
#     nmap <buffer> <ESC>   <Plug>(unite_exit)
#     imap <buffer> <ESC><ESC>   <Plug>(unite_exit)
#     " Ctrl+J/Kで選択
#     imap <buffer> <C-j>   <Plug>(unite_select_next_line)
#     nmap <buffer> <C-j>   <Plug>(unite_loop_cursor_down)
#     imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
#     nmap <buffer> <C-k>   <Plug>(unite_loop_cursor_up)
#     " 1ワード削除(インサートモードと同じ挙動になるようにする)
#     nmap <buffer> <C-w>   <Plug>(unite_delete_backspace_word)
#     " 既に入力されている文字を削除した状態で入力
#     nmap <buffer> I       <Plug>(unite_append_end)<Plug>(unite_delete_backward_line)
#     nmap <buffer> <C-u>   <Plug>(unite_append_end)<Plug>(unite_delete_backward_line)
#     " <C-p>,<C-n>の方向を入れ替え、インサートモードでも有効にする
#     nmap <buffer> <C-p>   <Plug>(unite_rotate_next_source)
#     imap <buffer> <C-p>   <Plug>(unite_insert_leave)
#           \<Plug>(unite_rotate_next_source)<Plug>(unite_insert_enter)
#     nmap <buffer> <C-n>   <Plug>(unite_rotate_previous_source)
#     imap <buffer> <C-n>   <Plug>(unite_insert_leave)
#           \<Plug>(unite_rotate_previous_source)<Plug>(unite_insert_enter)
#
#   endfunction
#
#   nnoremap [unite] <Nop>
#   nmap <Space> [unite]
#   " 前回のUnite結果を再表示
#   nnoremap <silent> [unite]<Space> :<C-u>UniteResume<CR>
#   " ソースを選択
#   nnoremap <silent> [unite]s :<C-u>Unite source<CR>
#   " Grep
#   nnoremap <silent> [unite]g :<C-u>Unite grep:. -no-empty<CR>
#   " ファイルを開く
#   nnoremap <silent> <C-p> :<C-u>Unite
#         \ -no-short-source-names -start-insert
#         \ file_rec/git:--cached:--others:--exclude-standard
#         \ neomru/file
#         \ file_rec/async:`expand('%:p:h')`
#         \ buffer
#         \ file/new<CR>
#   " Grep
#   nnoremap <silent> [unite]g :<C-u>Unite grep:. -no-empty<CR>
#   " よく使うファイルをメニューに登録
#   let g:unite_source_menu_menus.fav_files = {
#         \   'description': 'Favolite menus'
#         \ }
#   let g:unite_source_menu_menus.fav_files.command_candidates = [
#         \   ['show gist list',    'Unite gista'],
#         \   ['load .vimrc',       'source '  . resolve(expand('~/.vimrc'))],
#         \   ['edit .vimrc',       'tabedit ' . resolve(expand('~/.vimrc'))],
#         \   ['edit dein.toml',    'tabedit ' . resolve(expand('~/.vim/dein.toml'))],
#         \   ['edit .zshrc',       'tabedit ' . resolve(expand('~/.zshrc'))],
#         \ ]
#   nnoremap <silent> [unite]m :<C-u>Unite -start-insert menu:fav_files<CR>
# '''
#
# [[plugins]]
# repo = 'momo-lab/switchunite.vim'
# lazy = 1
# depends = ['unite.vim', 'neomru.vim']
# hook_add = '''
#   " " <C-p>,<C-n>で複数のsourceを切り替える
#   " call switchunite#add('toggle_file', {
#   "       \ 'keymap': '<C-p>',
#   "       \ 'keymap_next': '<C-p>',
#   "       \ 'keymap_prev': '<C-n>',
#   "       \ 'option': '-start-insert -hide-source-names -no-short-source-names',
#   "       \ 'commands': [
#   "       \   ['Unite', 'file_rec/git:--cached:--others:--exclude-standard file/new'],
#   "       \   ['Unite', 'neomru/file file/new'],
#   "       \   ['UniteWithBufferDir', 'file_rec file/new'],
#   "       \   ['Unite', 'buffer -no-start-insert'],
#   "       \ ]})
#   " " switchunite.vimのテスト用
#   " call switchunite#add('toggle_others', {
#   "       \ 'keymap': '<C-a>',
#   "       \ 'commands': [
#   "       \   ['Unite', 'source -no-start-insert'],
#   "       \   ['Unite', 'dein -no-start-insert'],
#   "       \ ]})
# '''
#
# [[plugins]] # Uniteでファイル履歴を扱えるようにする
# repo = 'Shougo/neomru.vim'
# depends = ['unite.vim']
# hook_add = '''
#   " ファイル履歴を表示
#   nnoremap <silent> [unite]r :<C-u>Unite
#         \ -start-insert -hide-source-names
#         \ neomru/file file/new<CR>
#   " ディレクトリ履歴を表示
#   nnoremap <silent> [unite]R :<C-u>Unite
#         \ -start-insert -hide-source-names
#         \ neomru/directory<CR>
# '''
#
# [[plugins]] # アウトラインを表示
# repo = 'Shougo/unite-outline'
# depends = ['unite.vim']
#
# [[plugins]] # カラースキーマを切り替える
# repo = 'ujihisa/unite-colorscheme'
# depends = ['unite.vim']
#
# [[plugins]] # ハイライトを表示
# repo = 'osyo-manga/unite-highlight'
# depends = ['unite.vim']
#
# [[plugins]] # Gist一覧を表示
# repo = 'lambdalisue/vim-gista-unite'
# depends = ['vim-gista', 'unite.vim']
#
# ======================================================================== }}}
# 補完・スニペット {{{
[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = 'has("nvim")'
on_i = 1
hook_add = '''
  " Use deoplete.
  let g:deoplete#enable_at_startup = 1
  " Use smartcase.
  let g:deoplete#enable_smart_case = 1

  inoremap <silent><expr> <TAB>
  \ pumvisible() ? "\<C-n>" :
  \ <SID>check_back_space() ? "\<TAB>" :
  \ deoplete#mappings#manual_complete()
  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
  endfunction
  inoremap <silent><expr> <S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
  inoremap <silent><expr> <C-j> pumvisible() ? "\<C-n>" : "\<C-j>"
  inoremap <silent><expr> <C-k> pumvisible() ? "\<C-p>" : "\<C-k>"

  " <C-h>, <BS>: close popup and delete backword char.
  inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
  inoremap <expr><BS>  deoplete#smart_close_popup()."\<C-h>"

  " <CR>: close popup and save indent.
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function() abort
    return deoplete#close_popup() . "\<CR>"
  endfunction
'''

# ======================================================================== }}}
# ファイラ {{{
[[plugins]] # Vimfiler
repo = 'Shougo/vimfiler.vim'
depends = ['unite.vim']
hook_add = '''
  let g:vimfiler_as_default_explorer = 1
  nnoremap <F2> :<C-u>VimFilerExplorer<CR>
'''

# ======================================================================== }}}
# ステータスライン {{{
[[plugins]]
repo = 'itchyny/lightline.vim'
depends = ['vim-fugitive']
hook_add = '''
  let g:lightline = {
        \ 'active': {
        \   'left': [
        \     ['mode', 'paste'],
        \     ['readonly', 'filename', 'modified'],
        \     ['anzu'],
        \   ],
        \   'right': [
        \     ['rowinfo'],
        \     ['fileformat', 'fileencoding', 'filetype'],
        \     ['coc'],
        \   ],
        \ },
        \ 'inactive': {
        \   'left':  [ ['filename', 'modified'] ],
        \   'right': [ ['rowinfo'], ['coc'] ],
        \ },
        \ 'component': {
        \   'anzu': '%{anzu#search_status()}',
        \   'rowinfo': '%4l/%L(%3p%%):%-3v',
        \   'coc': '%{coc#status()}%{get(b:, "coc_current_function", "")}'
        \ },
        \ 'subseparator': {'left': '', 'right': '|'},
        \ }
  command! -bar LightlineUpdate
        \ call lightline#init() |
        \ call lightline#colorscheme() |
        \ call lightline#update()
'''

# ======================================================================== }}}
# QuickRun {{{
[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'QuickRun'
hook_add = '''
  let g:quickrun_config = {
              \ 'ruby': { 'command': 'bundruby' }
              \ }
  nnoremap <silent> <Leader>r :QuickRun -mode n<CR>
  nnoremap <silent> <Leader>R gg:QuickRun -mode n<CR>``
  vnoremap <silent> <Leader>r :QuickRun -mode v<CR>
'''

# ======================================================================== }}}
# Google翻訳 {{{
[[plugins]]
repo = 'daisuzu/translategoogle.vim'
on_cmd = ['TranslateGoogle', 'TranslateGoogleCmd']

# ======================================================================== }}}
# for git {{{
[[plugins]] # :Gwrite, :Gdiff, :GcommitなどGで始まるコマンドを提供
repo = 'tpope/vim-fugitive'
hook_add = '''
  command! Gci Gcommit
  command! Gcia Gcommit -a
'''

[[plugins]] # gitの差分を左端に表示する
repo = 'airblade/vim-gitgutter'

[[plugins]] # :Agitでgitのログを見る
repo = 'cohama/agit.vim'
on_cmd = ['Agit', 'AgitFile']

[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = ['Gina']

[[plugins]] # git rebase -iを便利にする
repo = 'hotwatermorning/auto-git-diff'

# ======================================================================== }}}
# for github {{{
[[plugins]] # Github issue
repo = 'jaxbot/github-issues.vim'
on_cmd = 'Gissue'
hook_add = '''
  let g:github_issues_no_omni = 1
'''

[[plugins]] # GitHub関連の補完
repo = 'rhysd/github-complete.vim'
depends = ['vimproc.vim']
on_ft = ['gitcommit', 'markdown']
hook_add = '''
  let g:github_complete_overwrite_omnifunc_filetypes = 
        \ ['gitcommit', 'markdown']
  let g:github_complete_include_issue_title = 1
'''

[[plugins]] # Gist操作
repo = 'lambdalisue/vim-gista'
on_cmd = 'Gista'
hook_add = '''
  let g:gista#command#list#default_opener = 'botright 15 split'
  let g:gista#command#post#default_public = 0
  autocmd FileType gista-list call s:gista_list_mappings()
  function! s:gista_list_mappings()
    nmap <buffer> <ESC> <Plug>(gista-quit)
  endfunction
'''

# ======================================================================== }}}
# for toml {{{
[[plugins]] # TOML syntax
# ハイライトがおかしくなることがあるのでforkして修正したものを使用している。
# PRした方がいいんだけど、常に先頭から解析するのが本当に良いのか微妙で躊躇している。
repo = 'momo-lab/vim-toml'
rev = 'fix_syntax_sync'
on_ft = 'toml'

# ======================================================================== }}}
# for golang {{{
[[plugins]]
# :wでgoimportsする
repo = 'mattn/vim-goimports'
on_ft = 'go'

# ======================================================================== }}}
# for html {{{
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'vue']
hook_add = '''
  let g:user_emmet_leader_key = '<c-y>'
'''

# ======================================================================== }}}
# for markdown {{{
[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown']
hook_add = '''
 let g:vim_markdown_folding_style_pythonic = 1
 let g:vim_markdown_new_list_item_indent = 0
'''

# ======================================================================== }}}
# for vue {{{
[[plugins]]
repo = 'posva/vim-vue'
on_ft = ['vue']

# ======================================================================== }}}
# library {{{
[[plugins]]
repo = 'Shougo/vimproc.vim'
lazy = 1
build = 'make'

[[plugins]]
repo = 'vim-jp/vital.vim'
lazy = 1

[[plugins]]
repo = 'roxma/nvim-yarp'
lazy = 1

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'lambdalisue/vital-Web-API-GitHub'
lazy = 1

[[plugins]]
repo = 'mattn/webapi-vim'
lazy = 1

[[plugins]] # cursor位置のファイルタイプ判定ライブラリ
repo = 'Shougo/context_filetype.vim'
lazy = 1

[[plugins]] # Vim script testing framework
repo = 'thinca/vim-themis'
hook_post_update = '''
  let g:dein#plugin.build =
        \ 'ln -sf ' . g:dein#plugin.path . '/bin/themis ~/.zplug/bin/themis'
'''

# ======================================================================== }}}
