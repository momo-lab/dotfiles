# prefix
set-option -g prefix C-t
#set-option -g prefix-timeout 500  # tmux 3.5~

# 256色対応
set -g default-terminal "xterm-256color"
set -g terminal-overrides "term:colors=256"
set -g display-time 2000

# バッファサイズ
set -g history-limit 10000

# リロード
bind-key r    source-file ~/.tmux.conf \; display "Reloaded!"
bind-key C-r  source-file ~/.tmux.conf \; display "Reloaded!"

# キーストロークのディレイを減らす
set -sg escape-time 0

# インデックスを1から始める
set -g base-index 1
setw -g pane-base-index 1

# copy modeのスタイルをviにする
set-option -wg mode-keys vi
bind-key -T copy-mode-vi v 'send-keys -X begin-selection'

# clipboardにwin32yank.exeを使用する
bind-key -N 'Paste from copy mode' \
  ]   run-shell 'win32yank.exe -o | xargs -0 -I{} tmux set-buffer -- {} && tmux paste-buffer -p'
bind-key -N 'Paste from copy mode' \
  C-] run-shell 'win32yank.exe -o | xargs -0 -I{} tmux set-buffer -- {} && tmux paste-buffer -p'

# Kill window
bind-key X   confirm-before -p "kill-window #W? (y/n)" kill-window

# split windows like vim
# vim's definition of a horizontal/vertical split is reversed from tmux's
bind-key -N 'Split holizontal window' \
  s   split-window -vc "#{pane_current_path}"
bind-key -N 'Split holizontal window' \
  C-s split-window -vc "#{pane_current_path}"
bind-key -N 'Split vertical window' \
  v   split-window -hc "#{pane_current_path}"
bind-key -N 'Split vertical window' \
  C-v split-window -hc "#{pane_current_path}"

set -as command-alias[100] ide='run-shell ~/.myscript/bin/split-window'

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key    -N 'Select the pane to the left of the active pane' \
  h   if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -r -N 'Select the pane to the left of the active pane' \
  C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key    -N 'Select the pane below the active pane' \
  j   if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -r -N 'Select the pane below the active pane' \
  C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key    -N 'Select the pane above the active pane' \
  k   if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -r -N 'Select the pane above the active pane' \
  C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key    -N 'Select the pane to the right of the active pane' \
  l   if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -r -N 'Select the pane to the right of the active pane' \
  C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"

# ghq-open
bind-key -N 'Open ghq list' \
  C-n 'run-shell ~/.config/tmux/open-ghq'

# feel free to change the "1" to however many lines you want to resize by, only
# one at a time can be slow
bind-key -r <   resize-pane -L 1
bind-key -r >   resize-pane -R 1
bind-key -r +   resize-pane -D 1
bind-key -r -   resize-pane -U 1

# bind : to command-prompt like vim
# this is the default in tmux already
bind-key : command-prompt

set-option -g pane-border-status bottom
set-option -g pane-border-format "#(~/.config/tmux/pane-border '#{pane_current_path}' '#P' '#{pane_active}')"
set-option -g pane-border-style fg=colour008
set-option -g pane-active-border-style fg=blue
# TODO: prefix-timeout時に色が元に戻らないので保留
# set-option -g status-style "#{?client_prefix,bg=yellow fg=black,bg=green fg=black}"
set-option -g status-left-length 20

# plugins
set -g @plugin 'tmux-plugins/tpm'

set -g @plugin 'momo-lab/tmux-toggle-scratch'
#run "~/ghq/github.com/momo-lab/tmux-toggle-scratch/tmux-toggle-scratch.tmux"
set -g @toggle-scratch-keys "C-t t"
set -g @toggle-scratch-popup-options "-w 80% -h 70%"

run '~/.tmux/plugins/tpm/tpm'
